@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@model NetBlog.Web.Models.ViewModels.BlogDetailViewModel

@{
    ViewData["Title"] = Model.Title;
    int nextPage = Convert.ToInt32(ViewBag.PageNumber) + 1;
    int prevPage = Convert.ToInt32(ViewBag.PageNumber) - 1;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        @if (Model.Liked)
                        {
                            <a id="btnIsLiked" style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor:pointer;">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }
                    }
                    <span id="totalLikes">@Model.TotalLikes</span> Likes
                </div>

                <div class="mb-3 d-flex">
                    @foreach (var tag in @Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />

                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>

                        @if (signInManager.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <input type="text" class="form-control" asp-for="CommentDescription" required />
                                </div>

                                <div class="mb-3">
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="Id" />
                                    <input type="hidden" asp-for="UrlHandle" />
                                </div>
                            </form>
                        }
                    </div>

                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between">
                                            <strong>
                                                <span class="text-secondary">@comment.Username</span>
                                            </strong>
                                            <em>
                                                <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                            </em>
                                        </div>
                                        <div>
                                            @comment.Description
                                        </div>
                                    </div>
                                </div>
                            }

                            <nav aria-label="Page navigation example">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item">
                                        <a class="page-link"
                                           asp-controller="Blogs"
                                           asp-action="Index"
                                           asp-route-pageNumber="@prevPage"
                                           asp-route-pageSize="@ViewBag.PageSize"
                                           asp-route-urlHandle="@ViewBag.UrlHandle">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>

                                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                                    {
                                        <li class="page-item">
                                            <a class="page-link"
                                               asp-controller="Blogs"
                                               asp-action="Index"
                                               asp-route-pageNumber="@i"
                                               asp-route-pageSize="@ViewBag.PageSize"
                                               asp-route-urlHandle="@ViewBag.UrlHandle">@i</a>
                                        </li>

                                    }

                                    <li class="page-item">
                                        <a class="page-link"
                                           asp-controller="Blogs"
                                           asp-action="Index"
                                           asp-route-pageNumber="@nextPage"
                                           asp-route-pageSize="@ViewBag.PageSize"
                                           asp-route-urlHandle="@ViewBag.UrlHandle">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    </div>
                </div>

                
            }
            else
            {
                <p>Blog Post not found.</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>

        const btnLikeElement = document.getElementById('btnLike');
        const btnIsLikedElement = document.getElementById('btnIsLiked');
        const totalLikesElement = document.getElementById('totalLikes');

        async function getTotalLikes() {
            fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikesElement.innerHTML = result);
        }

        async function addLikeForBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ 
                    blogPostId: '@Model.Id', 
                    userId: '@userManager.GetUserId(User)' 
                })
            }).then(() => {
                console.log("Like checked");

                if (btnLikeElement != null) {
                    btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                    btnLikeElement.removeEventListener('click', addLikeForBlog);
                    btnLikeElement.addEventListener('click', unlikeForBlog);
                    getTotalLikes();
                }
                else {
                    btnIsLikedElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                    btnIsLikedElement.removeEventListener('click', addLikeForBlog);
                    btnIsLikedElement.addEventListener('click', unlikeForBlog);
                    getTotalLikes();
                }
            });
        }

        async function unlikeForBlog() {
            fetch('/api/BlogPostLike/Unlike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                console.log("Unlike checked");

                if (btnIsLikedElement != null) {
                    btnIsLikedElement.innerHTML = '<i class="bi bi-hand-thumbs-up"></i>';
                    btnIsLikedElement.removeEventListener('click', unlikeForBlog);
                    btnIsLikedElement.addEventListener('click', addLikeForBlog);
                    getTotalLikes();
                }
                else {
                    btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up"></i>';
                    btnLikeElement.removeEventListener('click', unlikeForBlog);
                    btnLikeElement.addEventListener('click', addLikeForBlog);
                    getTotalLikes();
                }
            });
        }

        if (btnLikeElement != null) {
            btnLikeElement.addEventListener('click', addLikeForBlog);
        }
        if (btnIsLikedElement != null) {
            btnIsLikedElement.addEventListener('click', unlikeForBlog);
        }

        document.addEventListener("DOMContentLoaded", function (event) {
            var scrollpos = sessionStorage.getItem('commentcrollpos');
            sessionStorage.clear();
            if (scrollpos) {
                window.scrollTo(0, scrollpos);
                sessionStorage.clear();
            }
        });

        window.onbeforeunload = function (e) {
            sessionStorage.setItem('commentcrollpos', window.scrollY);
        };

    </script>
}